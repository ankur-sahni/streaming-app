{"version":3,"sources":["axios.js","requests.js","Banner.js","Row.js","Nav.js","Slider.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetFlixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchSlider","Banner","str","n","useState","movie","setMovie","useEffect","a","get","request","data","results","Math","floor","random","length","fatchData","className","style","backgroundSize","backgroundImage","poster_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","fetchData","map","key","id","src","backdrop_path","alt","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","process","SwiperCore","use","Autoplay","Slider","slides","setSlides","spaceBetween","slidesPerView","autoplay","slide","release_date","vote_count","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9abfbad.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\nexport default instance;\r\n","const API_KEY = '52e5552adf2eafd0c372bfdfcbefd4e6';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetFlixOriginals: `discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=99`,\r\n    fetchSlider: `/discover/movie?api_key=${API_KEY}&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_genres=12`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState({});\r\n\r\n    useEffect(() => {\r\n        async function fatchData() {\r\n            const request = await axios.get(requests.fetchNetFlixOriginals);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n            );\r\n            return request;\r\n        }\r\n        fatchData();\r\n    }, [requests.fetchNetFlixOriginals]);\r\n\r\n    function truncate(str, n) {\r\n        return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n    }\r\n    return (\r\n        <div>\r\n            <header\r\n                className=\"banner\"\r\n                style={{\r\n                    backgroundSize: 'cover',\r\n                    backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.poster_path}\")`,\r\n                    backgroundPosition: 'center center',\r\n                }}\r\n            >\r\n                <div className=\"banner__Content\">\r\n                    <h1 className=\"banner__title\">\r\n                        {movie?.title || movie?.name || movie?.original_name}\r\n                    </h1>\r\n                    <div className=\"banner__buttons\">\r\n                        <button className=\"banner_button\">Play</button>\r\n                        <button className=\"banner_button\">My List</button>\r\n                    </div>\r\n                    <p className=\"banner__description\">\r\n                        {truncate(movie?.overview, 150)}\r\n                    </p>\r\n                </div>\r\n                <div className=\"banner__fade\"></div>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\n//const imgBaseUrl =\"https://image.tmdb.org/t/p/original/\"\r\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row__title\">{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map((movie) => {\r\n                    return (\r\n                        <img\r\n                            className={`row__poster ${\r\n                                isLargeRow && 'rowPosterLarge'\r\n                            }`}\r\n                            key={movie.id}\r\n                            src={`${imgBaseUrl}${\r\n                                isLargeRow\r\n                                    ? movie.poster_path\r\n                                    : movie.backdrop_path\r\n                            }`}\r\n                            alt={movie.name}\r\n                        ></img>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState([]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', () => {\r\n            if (window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false);\r\n        });\r\n        return () => {\r\n            window.removeEventListener('scroll');\r\n        };\r\n    }, []);\r\n    // console.log(show);\r\n    return (\r\n        <div className={`nav ${show && 'nav__black'}`}>\r\n            <img\r\n                src={`${process.env.PUBLIC_URL}/logoss.png`}\r\n                className=\"nav__logo nav__logo__left\"\r\n                alt=\"\"\r\n            />\r\n            <img\r\n                src={`${process.env.PUBLIC_URL}/logosj.png`}\r\n                className=\"nav__logo nav__logo__right\"\r\n                alt=\"\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Swiper, SwiperSlide } from 'swiper/react';\r\nimport SwiperCore, { Autoplay } from 'swiper';\r\nimport 'swiper/swiper-bundle.css';\r\n\r\nimport axios from './axios';\r\nimport './Slide.css';\r\nconst imgBaseUrl = 'https://image.tmdb.org/t/p/original/';\r\nfunction truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n}\r\nSwiperCore.use([Autoplay]);\r\nfunction Slider({ fetchUrl }) {\r\n    const [slides, setSlides] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setSlides(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n    // console.log(slides);\r\n    return (\r\n        <Swiper\r\n            spaceBetween={50}\r\n            slidesPerView={1}\r\n            autoplay={true}\r\n            // onSlideChange={() => console.log('slide change')}\r\n            // onSwiper={(swiper) => console.log(swiper)}\r\n        >\r\n            {/* {carousel.map((item) => {\r\n                console.log(item);\r\n                return (\r\n                    <SwiperSlide key={item.id} className=\"large__slide\">\r\n                        <img\r\n                            src={item.thumbnail}\r\n                            alt={item.name}\r\n                            className=\"slide_item\"\r\n                        />\r\n                    </SwiperSlide>\r\n                );\r\n            })} */}\r\n            {slides.map((slide) => {\r\n                // console.log(slide);\r\n                return (\r\n                    <SwiperSlide\r\n                        key={slide.id}\r\n                        className=\"large__slide\"\r\n                        style={{\r\n                            backgroundSize: 'cover',\r\n                            backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${slide?.backdrop_path}\")`,\r\n                            backgroundPosition: 'center center',\r\n                        }}\r\n                    >\r\n                        <div className=\"slide__content\">\r\n                            <h1 className=\"slide__title\">\r\n                                {slide?.title ||\r\n                                    slide?.name ||\r\n                                    slide?.original_name}\r\n                            </h1>\r\n                            <p className=\"slide__info\">{`RELEASE DATE: ${slide.release_date} - VOTES: ${slide.vote_count} `}</p>\r\n                            <p className=\"slide__description\">\r\n                                {truncate(slide?.overview, 100)}\r\n                            </p>\r\n                        </div>\r\n                        {/* <img\r\n                            src={`${imgBaseUrl}${slide.backdrop_path}`}\r\n                            alt={slide.name}\r\n                            className=\"slide__item\"\r\n                        /> */}\r\n                    </SwiperSlide>\r\n                );\r\n            })}\r\n        </Swiper>\r\n    );\r\n}\r\n\r\nexport default Slider;\r\n","import React, { useState, useEffect } from 'react';\nimport Banner from './Banner';\nimport Row from './Row';\nimport requests from './requests';\nimport './App.css';\nimport Nav from './Nav';\nimport Slider from './Slider';\n// import axios from 'axios';\n\nfunction App() {\n    // const [carousel, setCarousel] = useState([]);\n\n    // useEffect(() => {\n    //     const uri =\n    //         'http://stagapi.vuscreen.in/spicescreen/webapi/feedByStorage';\n    //     const headers = {\n    //         'Content-Type': 'application/json',\n    //         Accept: 'application/json',\n    //     };\n    //     const postData = {\n    //         partner: 'dbrovmhalfs83i130k6u9fh0sj',\n    //         storage_capacity: '2GB',\n    //     };\n    //     async function getAppData() {\n    //         try {\n    //             const request = await axios.post(uri, postData, headers);\n    //             setCarousel(request.data.WATCH[0].subCat[0].content);\n    //         } catch (err) {\n    //             // Handle Error Here\n    //             console.error(err);\n    //         }\n    //     }\n    //     getAppData();\n    // }, []);\n\n    return (\n        <div className=\"App\">\n            <Nav />\n            <Banner />\n            <Slider fetchUrl={requests.fetchSlider} />\n            <Row\n                title=\"NETFLIX ORIGINALS\"\n                fetchUrl={requests.fetchNetFlixOriginals}\n                isLargeRow\n            />\n            <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n            <Row\n                title=\"Trending Now\"\n                fetchUrl={requests.fetchTrending}\n                isLargeRow\n            />\n            <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n            <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n            <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n            <Row\n                title=\"Romantic Movies\"\n                fetchUrl={requests.fetchRomanceMovies}\n            />\n            <Row title=\"Documentries\" fetchUrl={requests.fetchDocumentaries} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}